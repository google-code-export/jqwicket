#labels Featured
*1. How to use JQuery in non conflict mode with JQWicket?*

Use `JQContributionConfig` to configure JQuery's non-conflict alias.

{{{
JQContributionConfig config = new JQContributionConfig().enableNonConflictMode('jq');

addPreComponentOnBeforeRenderListener(new JQComponentOnBeforeRenderListener(config));
}}}

This will use *`jq`* as alias for *`$`* in all your jquery statements.

*2. How to use JQWicket's Selector Builder API?*

Use `com.google.code.jqwicket.api.S` to build jquery selector expressions.

{{{
import static com.google.code.jqwicket.api.JQuery.$f;
import com.google.code.jqwicket.api.S;
....

final Component comp = ....; 
final Component other = ....; 

S.id(comp).to$().click(
   $f(
     S.id(other).to$().hide(),
     S.clazz("a_css_class").attributeContains("href", "www").first().to$().show()
   )
);
}}}

*3. How to let wicket component render required jquery statements within `$(document).ready(...)` block?

Let your component implement `IJQHeaderContributor` interface.

{{{
import com.google.code.jqwicket.api.S;
import com.google.code.jqwicket.IJQHeaderContributor;

public class MyPanel extends Panel implements IJQHeaderContributor{

   ...

   public void contribute(JQHeaderContributionTarget target) {
      target.addJavascriptResourceUrls("js/myscript.js");
      target.addJQStatements(
         S.id(this).to$().hide(),
         S.clazz("some-css-class").to$().show()
   }

   ...

}
}}}

Alternatively just add a 'JQBehavior' to your component:

{{{

JQBehavior behavior = new JQBehavior();
behavior.addJsResourceUrls("js/myscript.js");
behavior.addJQStatements(
   S.id(this).to$().hide(),
   S.clazz("some-css-class").to$().show()
);

Component comp = .... ;
comp.add(behavior);
}}}

*4. How to render javascript contributions at the bottom of markup with wicket?*

Use Wicket's response decoration mechanism introduced since 1.4.17 (see wicket's "Resource Aggregation" examples).

Find enclosed the simple usage example:

- Add an `JavascriptFilteredIntoFooterHeaderResponse` to your `WebApplication`:

{{{
setHeaderResponseDecorator(new IHeaderResponseDecorator() {
   public IHeaderResponse decorate(IHeaderResponse response) {
      return new JavascriptFilteredIntoFooterHeaderResponse(
                     response, "footerJS");
   }
});
}}}

- Add the placeholder for the javascript footer contributions to the html template:

{{{
<wicket:container wicket:id="footerJS"></wicket:container>
}}}

- Add `HeaderResponseFilteredResponseContainer` to your `WebPage`:

{{{
add(new HeaderResponseFilteredResponseContainer("footerJS", "footerJS"));
}}}